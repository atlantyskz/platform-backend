"""created new models + alter subscription table

Revision ID: f608a75ac83b
Revises: 2fe197af0434
Create Date: 2025-04-03 18:43:34.510624

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f608a75ac83b'
down_revision: Union[str, None] = '2fe197af0434'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create new subscription_plans table (replacement for subscriptions)
    op.create_table(
        'subscription_plans',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('subscription_name', sa.String(length=255), nullable=False),
        sa.Column('limit_queries', sa.Integer(), nullable=False),
        sa.Column('limit_web_ai', sa.Integer(), nullable=False),
        sa.Column('limit_members', sa.Integer(), nullable=False),
        sa.Column('active_days', sa.Integer(), nullable=False),
        sa.Column('price', sa.Float(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )

    # Other new tables
    op.create_table(
        'whatsapp_instances',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('instance_name', sa.String(), nullable=False),
        sa.Column('is_primary', sa.Boolean(), nullable=False),
        sa.Column('instance_type', sa.String(), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['organization_id'], ['organizations.id']),
        sa.PrimaryKeyConstraint('id'),
    )

    op.create_table(
        'cash_balance',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('balance', sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )

    op.create_table(
        'current_whatsapp_instance',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('whatsapp_instance_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id']),
        sa.ForeignKeyConstraint(['whatsapp_instance_id'], ['whatsapp_instances.id']),
        sa.PrimaryKeyConstraint('user_id', 'whatsapp_instance_id'),
        sa.UniqueConstraint('user_id', 'whatsapp_instance_id', name='_user_whatsapp_instance_id_uc'),
    )

    op.create_table(
        'user_instance_association',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('instance_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['instance_id'], ['whatsapp_instances.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_id', 'instance_id'),
    )

    op.create_table(
        'organization_subscriptions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=False),
        sa.Column('promo_id', sa.Integer(), nullable=True),
        sa.Column('subscription_id', sa.Integer(), nullable=False),
        sa.Column('bought_date', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['promo_id'], ['promocodes.id']),
        sa.ForeignKeyConstraint(['subscription_id'], ['subscription_plans.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
    )

    # Drop old related tables
    op.drop_table('user_cache_balance')
    op.drop_table('user_used_promocodes')

    # Drop subscriptions with cascade
    op.execute('DROP TABLE subscriptions CASCADE')

    op.execute("""
        UPDATE billing_transactions
        SET subscription_id = NULL
        WHERE subscription_id IS NOT NULL
        AND subscription_id NOT IN (SELECT id FROM subscription_plans)
    """)

    # Recreate FK on billing_transactions to point to subscription_plans
    op.create_foreign_key(
        None,
        'billing_transactions',
        'subscription_plans',
        ['subscription_id'],
        ['id'],
        ondelete='SET NULL'
    )

    # Update column types
    op.alter_column(
        'vacancy_requirements', 'requirement_hash',
        existing_type=sa.VARCHAR(),
        type_=sa.TEXT,
        existing_nullable=False
    )
    op.alter_column(
        'vacancy_requirements', 'requirement_text',
        existing_type=sa.VARCHAR(),
        type_=sa.TEXT,
        existing_nullable=True
    )

    # Remove old indexes
    op.drop_index('ix_vacancy_requirements_requirement_hash', table_name='vacancy_requirements')
    op.drop_index('ix_vacancy_requirements_requirement_text', table_name='vacancy_requirements')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_vacancy_requirements_requirement_text', 'vacancy_requirements', ['requirement_text'], unique=False)
    op.create_index('ix_vacancy_requirements_requirement_hash', 'vacancy_requirements', ['requirement_hash'], unique=False)
    op.alter_column('vacancy_requirements', 'requirement_text',
               existing_type=sa.TEXT(length=8000),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('vacancy_requirements', 'requirement_hash',
               existing_type=sa.TEXT(length=8000),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_constraint(None, 'billing_transactions', type_='foreignkey')
    op.create_foreign_key('billing_transactions_subscription_id_fkey', 'billing_transactions', 'subscriptions', ['subscription_id'], ['id'], ondelete='SET NULL')
    op.create_table('user_used_promocodes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('promo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subscription_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bought_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['promo_id'], ['promocodes.id'], name='user_used_promocodes_promo_id_fkey'),
    sa.ForeignKeyConstraint(['subscription_id'], ['subscriptions.id'], name='user_used_promocodes_subscription_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_used_promocodes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_used_promocodes_pkey')
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('atl_tokens', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('active_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='subscriptions_pkey')
    )
    op.create_table('user_cache_balance',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_cache_balance_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_cache_balance_pkey')
    )
    op.drop_table('organization_subscriptions')
    op.drop_table('user_instance_association')
    op.drop_table('current_whatsapp_instance')
    op.drop_table('cash_balance')
    op.drop_table('whatsapp_instances')
    op.drop_table('subscription_plans')
    # ### end Alembic commands ###
